方法一：从右下角的动态规划
class Solution {
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] nums=new int[m][n];
        nums[m-1][n-1]=grid[m-1][n-1];
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(i==m-1&&j<n-1){
                    nums[i][j]=nums[i][j+1]+grid[i][j];
                }else if(i<m-1&&j==n-1){
                    nums[i][j]=nums[i+1][j]+grid[i][j];
                }else if(i<m-1&&j<n-1){
                    nums[i][j]=Math.min(nums[i+1][j],nums[i][j+1])+grid[i][j];
                }
            }
        }
        return nums[0][0];
    }
}

从左上角动态规划，相当与求[0][0]到任意位置的最小和
