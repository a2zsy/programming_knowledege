方法一：对于每一个比前一个大的元素，求体积并填充。分两种情况>=max,<max，决定桶的高度
class Solution {
    public int trap(int[] height) {
        if(height.length==0){return 0;}
        int result=0;
       int i=0;
       int len=height.length;
       int max=height[0];
       while(i<len-1){
           if(height[i]<height[i+1]&&height[i+1]>=max){
               result+=smalltrap(height,i+1,max);
               max=height[i+1];
           }else if(height[i]<height[i+1]&&height[i+1]<max){
               result+=smalltrap(height,i+1,height[i+1]);
           }
           i++;
       }
       return result;
    }


    public int smalltrap(int[] height,int index, int num){
        int result=0;
        int i=index;
        while(i>0){
            if(height[i-1]>=num){
                return result;
            }else{
                result+=(num-height[i-1]);
                height[i-1]=num;
            }
            i--;
        }
        return 0;
    }
}
方法二：动态规划，对于每一列，左边最高的列和右边最高的列决定该列盛的水
class Solution {
    public int trap(int[] height) {
        if(height.length==0){return 0;}
        int result=0;
        int len=height.length;
        int[] max_left=new int[len];
        int[] max_right=new int[len];
        for(int i=1;i<len;i++){
            max_left[i]=Math.max(max_left[i-1],height[i-1]);
        }
        for(int i=len-2;i>=0;i--){
            max_right[i]=Math.max(max_right[i+1],height[i+1]);
        }

        for(int i=0;i<len;i++){
            int min=Math.min(max_left[i],max_right[i]);
            if(min>height[i]){
                result+=(min-height[i]);
            }
        }
        return result;
    }
}
