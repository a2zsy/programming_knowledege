方法一：下一个排列----固定算法，寻找下一个更大的且增幅最小的整数
class Solution {
    public void nextPermutation(int[] nums) {
        for(int i=nums.length-1;i>0;i--){
            if(nums[i-1]<nums[i]){
                if(i==nums.length-1){
                    swap(nums,i-1,i);
                    return;
                }else{
                    int k=i+1;
                    while(k<nums.length){
                        if(nums[k]<=nums[i-1]){
                            swap(nums,k-1,i-1);
                            reverse(nums,i);
                            return;
                        }
                        k++;
                    }
                    if(k==nums.length){
                        swap(nums,k-1,i-1);
                        reverse(nums,i);
                        return;
                    }
                }
            }
        }
        reverse(nums,0);
    }


    public void swap(int[] arr,int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }


    public void reverse(int[] arr,int start){
        int len=arr.length-1;
        while(start<len){
            int temp=arr[start];
            arr[start]=arr[len];
            arr[len]=temp;
            start++;
            len--;
        }
    }
}
