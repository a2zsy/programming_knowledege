方法一：时间复杂度必须是logN。我自己的做法是先用一次logN找到旋转点，再用一次logN找到索引值。
class Solution {
    public int search(int[] nums, int target) {
        int len=nums.length;       
        int i=0;
        int j=len-1;
        while(i<=j){
            int middle=(i+j)/2;
            if(middle>0&&nums[middle-1]>nums[middle]){
                if(target>nums[len-1]){
                    return findIndex(nums,target,0,middle-1);
                }else{
                    return findIndex(nums,target,middle,len-1);
                }
            }else if(nums[middle]>nums[j]){
                i=middle+1;
            }else{
                j=middle-1;
            }
        }
        
        return findIndex(nums,target,0,len-1);

    }


    public int findIndex(int[] arr,int target,int l,int h){
        if(l>h){return -1;}
        int middle=(l+h)/2;
        if(arr[middle]>target){
            return findIndex(arr,target,l,middle-1);
        }else if(arr[middle]<target){
            return findIndex(arr,target,middle+1,h);
        }else{
            return middle;
        }
    }
}
