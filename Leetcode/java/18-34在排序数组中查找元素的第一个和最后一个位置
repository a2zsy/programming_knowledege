方法一：-----时间复杂度不是logN，对于左半部分，不停的用二分查找找到左边界，右边同理
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int len=nums.length;
        int temp=findIndex(nums,target,0,len-1);
        if(temp==-1){
            return new int[]{-1,-1};
        }else{
            int left=temp;
            int cur=left;
            while(cur!=-1&&cur>0){
                cur=findIndex(nums,target,0,cur-1);
                if(cur!=-1){left=cur;}
            }
            int right=temp;
            cur=right;
            while(cur!=-1&&cur<len){
                cur=findIndex(nums,target,cur+1,len-1);
                if(cur!=-1){right=cur;}
            }
           return new int[]{left,right}; 
        }
    }


    public int findIndex(int[] arr,int target,int l,int h){
        if(l>h){return -1;}
        int middle=(l+h)/2;
        if(arr[middle]>target){
            return findIndex(arr,target,l,middle-1);
        }else if(arr[middle]<target){
            return findIndex(arr,target,middle+1,h);
        }else{
            return middle;
        }
    }
}

方法二：用两次二分查找，一次查找小于目标值的个数，一次查找大于目标值的个数
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0){return new int[]{-1,-1};}
        int left=findleft(nums,target);
        if(left==-1){return new int[]{-1,-1};}
        int right=findright(nums,target,left+1);
        return new int[]{left,right};
    }


    public int findleft(int[] arr,int target){
        int i=0;
        int j=arr.length-1;
        int result=0;
        while(i<=j){
            int middle=(i+j)/2;
            if(arr[middle]<target){
                i=middle+1;
            }else if(arr[middle]>target){
                j=middle-1;
            }else{
                result=middle;
                j=middle-1;
            }
        }
        if(result==0&&arr[0]!=target){
            return -1;
        }
        return result;
        
    }


//返回右边的索引值
    public int findright(int[] arr,int target,int start){
        int i=start;
        int j=arr.length-1;
        int result=start-1;
        while(i<=j){
            int middle=(i+j)/2;
            if(arr[middle]>target){
                j=middle-1;
            }else{
                result=middle;
                i=middle+1;
            }
        }      
        return result;
    }
}
