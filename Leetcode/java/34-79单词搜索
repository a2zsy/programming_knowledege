方法一：自己摸索的很笨的方法。首先找到第一个节点，然后每遇到一个节点，都有4中可能往下走.(回溯剪枝（深度优先搜索），状态重置)
class Solution {
    public boolean exist(char[][] board, String word) {
        int[][] m=new int[board.length][board[0].length];
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==word.charAt(0)){
                    m[i][j]=1;
                    if(function(board,word.substring(1),m,i,j)){
                        return true;
                    }
                    m[i][j]=0;
                }
            }
        }
        return false;
    }

    public boolean function(char[][] board,String s,int[][] m,int i,int j){
        if(s.isEmpty()){return true;}
        if(i-1>=0&&m[i-1][j]==0&&board[i-1][j]==s.charAt(0)){
            m[i-1][j]=1;
            if(function(board,s.substring(1),m,i-1,j)){
                return true;
            }else{
                m[i-1][j]=0;
            }
        }
        if(i+1<board.length&&m[i+1][j]==0&&board[i+1][j]==s.charAt(0)){
            m[i+1][j]=1;
            if(function(board,s.substring(1),m,i+1,j)){
                return true;
            }else{
                m[i+1][j]=0;
            }
        }
        if(j-1>=0&&m[i][j-1]==0&&board[i][j-1]==s.charAt(0)){
            m[i][j-1]=1;
            if(function(board,s.substring(1),m,i,j-1)){
                return true;
            }else{
                m[i][j-1]=0;
            }
        }
        if(j+1<board[0].length&&m[i][j+1]==0&&board[i][j+1]==s.charAt(0)){
            m[i][j+1]=1;
            if(function(board,s.substring(1),m,i,j+1)){
                return true;
            }else{
                m[i][j+1]=0;
            }
        }
        return false;
    }
}
