方法一：每次比较都建立一个map，遇到相同值减一，为零移出，最后map为空表明为异位词（前提长度相同）
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> list=new ArrayList<>();
        int[] mark=new int[strs.length];
        int i=0;
        while(i<strs.length){
            if(mark[i]==0){
                mark[i]=1;
                function(strs[i],strs,mark,list);
            }
            i++;
        }
        return list;
    }


    public void function(String s,String[] strs,int[] mark,List<List<String>> list){
        List<String> li=new ArrayList<>();
        li.add(s);
        for(int i=0;i<strs.length;i++){
            if(s.length()==strs[i].length()&&strs[i]!=s&&mark[i]==0){
                Map<Character,Integer> set=new HashMap<>();
                for(int ii=0;ii<s.length();ii++){
                    if(set.containsKey(s.charAt(ii))){
                        set.put(s.charAt(ii),set.get(s.charAt(ii))+1);
                    }else{
                        set.put(s.charAt(ii),1); 
                    }
                }
                boolean flag=true;
                for(int j=0;j<strs[i].length();j++){
                    if(set.containsKey(strs[i].charAt(j))){
                        int temp=set.get(strs[i].charAt(j));
                        temp--;
                        if(temp==0){
                            set.remove(strs[i].charAt(j),set.get(strs[i].charAt(j)));
                        }else{
                            set.put(strs[i].charAt(j),temp);
                        }
                    }else{
                       flag=false;
                       break; 
                    }
                }
                if(flag&&set.isEmpty()){
                    mark[i]=1;
                    li.add(strs[i]);
                }
            }
        }
        list.add(li);
    }
}

方法二：
将字符串转换成字符数组，排序，再转换成字符串，作为key，字符串本身作为值。最后将hashmap的值返回，即结果
