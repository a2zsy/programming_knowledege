方法一：递归遍历每一个节点，每个节点都有自己的范围，范围随着深度的增加越来越小
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null){return true;}
        return function(root,null,null);
    }

    public boolean function(TreeNode node,Integer minvalue,Integer maxvalue){
        boolean flag;
        if(minvalue==null&&maxvalue!=null){flag=node.val<maxvalue;}
        else if(minvalue!=null&&maxvalue==null){flag=node.val>minvalue;}
        else if(minvalue==null&&maxvalue==null){flag=true;}
        else{flag=node.val<maxvalue&&node.val>minvalue;}
        if(node.left!=null&&node.right!=null){
            return flag&&function(node.left,minvalue,node.val)&&function(node.right,node.val,maxvalue);
        }else if(node.left==null&&node.right!=null){
            return flag&&function(node.right,node.val,maxvalue);
        }else if(node.left!=null&&node.right==null){
            return flag&&function(node.left,minvalue,node.val);
        }else{
            return flag;
        }
    }
}

方法二：中序遍历的顺序就是从小到大的顺序，即为二叉搜索树。只需要加上一句比较大小即可。
class Solution {
    public boolean isValidBST(TreeNode root) {
        double min=-Double.MAX_VALUE;
        Stack<TreeNode> st=new Stack<>();
        while(root!=null||!st.isEmpty()){
            while(root!=null){
                st.push(root);
                root=root.left;
            }
            TreeNode temp=st.pop();
            if(temp.val<=min){return false;}
            min=temp.val;
            root=temp.right;
        }
        return true;
    }
}
