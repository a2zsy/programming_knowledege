方法一最笨，方法二是自己写的两指针移动，比较笨，方法三是官方题解，有多个地方的优化

方法一：比较笨，将链表存储在数组，数组相加后，再转成列表
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int count1=0;
        int count2=0;
        ListNode cur1=l1;
        ListNode cur2=l2;
        while(l1!=null){
            l1=l1.next;
            count1++;
        }
        while(l2!=null){
            l2=l2.next;
            count2++;
        }
        
        
        int[] arr1=new int[count1];
        int[] arr2=new int[count2];
        int i=0;
        int j=0;
        while(cur1!=null){
            arr1[i]=cur1.val;
            i++;
            cur1=cur1.next;
        }
        while(cur2!=null){
            arr2[j]=cur2.val;
            j++;
            cur2=cur2.next;
        }
        
        int[] arr3=two_add(arr1,arr2);
        ListNode head=new ListNode(arr3[0]);
        ListNode cur=head;
        for(i=1;i<arr3.length;i++){
            if(arr3[i]==-1){break;}
            ListNode Node=new ListNode(arr3[i]);
            head.next=Node;
            head=Node;
        }
        return cur;
    }
    
    
    public int[] two_add(int[] arr1,int[] arr2){
        int l=arr1.length>arr2.length?arr1.length:arr2.length;
        int m=l==arr1.length?arr2.length:arr1.length;
        int[] arr3=new int[l+1];
        int c=0;
        for(int i=0;i<l;i++){
            if(i>=m){
                arr3[i]=(arr1.length>arr2.length?arr1[i]:arr2[i])+c;
                c=0;
                if(arr3[i]>=10){
                arr3[i]=arr3[i]-10;
                c=1;
                }
            }
            else{
                arr3[i]=arr1[i]+arr2[i]+c;
                c=0;
                if(arr3[i]>=10){
                arr3[i]=arr3[i]-10;
                c=1;
                }
            }
        }
        if(c==1){arr3[l]=1;}else{arr3[l]=-1;}
        return arr3;
    }
}


方法二:两个指针不停移动------考虑到进位情况
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null&&l2==null){return null;}
        ListNode p1=l1;
        ListNode p2=l2;
        ListNode head=null;
        ListNode cur=null;
        int c=0;
        while(p1!=null&&p2!=null){
            if(cur==null) {
            	cur=new ListNode((p1.val+p2.val+c)%10);
            	head=cur;
            }else {
            	cur.next=new ListNode((p1.val+p2.val+c)%10);
            	cur=cur.next;
            }
            if(p1.val+p2.val+c>=10) {c=1;}else{c=0;}
            p1=p1.next;
            p2=p2.next;
        }
        while(p1==null&&p2!=null){
        	if(cur==null) {
            	cur=new ListNode((p2.val+c)%10);
            	head=cur;
            }else {
            	cur.next=new ListNode((p2.val+c)%10);
            	cur=cur.next;
            }
            if(p2.val+c>=10) {c=1;}else{c=0;}
            p2=p2.next;
        }
        while(p2==null&&p1!=null){
        	if(cur==null) {
            	cur=new ListNode((p1.val+c)%10);
            	head=cur;
            }else {
            	cur.next=new ListNode((p1.val+c)%10);
            	cur=cur.next;
            }
            if(p1.val+c>=10) {c=1;}else{c=0;}
            p1=p1.next;
        }
        if(c==1){
            cur.next=new ListNode(1);
        }
        return head;
    }
}

方法三：优化1-进位c不用ifelse，用整除；优化2-不需要写三个循环，将长度较短的链表后面的值自动补成0；优化3-用一个哑节点
public ListNode addTwoNumbers(ListNode l1,ListNode l2){
    ListNode dummyhead=new ListNode(0);
    ListNode cur=dummyhead;
    ListNode p1=l1;
    ListNode p2=l2;
    int c=0;
    while(p1!=null||p2!=null){
        int x=p1==null?0:p1.val;
        int y=p2==null?0:p2.val;
        cur.next=new ListNode((x+y+c)%10);
        cur=cur.next;
        c=(x+y+c)/10;
        p1=p1==null?null:p1.next;
        p2=p2==null?null:p2.next;
    }
    if(c==1){cur.next=new ListNode(1);}
    return dummyhead.next;
}
